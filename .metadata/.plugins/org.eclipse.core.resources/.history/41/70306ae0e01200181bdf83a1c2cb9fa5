package prog3060.assignment1.jvisser.dao;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;


import prog3060.assignment1.jvisser.models.GeoAreaClassBean;
import prog3060.assignment1.jvisser.models.IndividualGeoAreaDetailsBean;

public class ApplicationDao {

	private static PreparedStatement GetGeographicAreaClassifications(Connection connection) throws SQLException
    {
        String sqlSelectQuery = "SELECT GEOGRAPHICAREAID, LEVEL, NAME FROM GEOGRAPHICAREA ORDER BY LEVEL ASC";

        PreparedStatement preparedStatement = connection.prepareStatement(sqlSelectQuery);

        return preparedStatement;
    }
	
	private static PreparedStatement GetIndividualGeographicAreaDetails(Connection connection, String geographicAreaId) throws SQLException
    {
        String sqlSelectQuery = "SELECT G.NAME, G.CODE, G.LEVEL, A.COMBINED FROM GEOGRAPHICAREA As G JOIN AGE As A ON G.GEOGRAPHICAREAID = A.GEOGRAPHICAREA JOIN CENSUSYEAR As Y ON A.CENSUSYEAR = Y.CENSUSYEARID WHERE A.AGEGROUP = 1 AND Y.CENSUSYEAR = 2016 AND G.GEOGRAPHICAREAID = ?";

        PreparedStatement preparedStatement = connection.prepareStatement(sqlSelectQuery);

        preparedStatement.setString(1, geographicAreaId);
        
        return preparedStatement;
    }
	
	private static PreparedStatement GetIndividualGeographicAreaDetailNames(Connection connection, String geographicAreaId, String code) throws SQLException
    {
        String sqlSelectQuery = "SELECT NAME FROM GEOGRAPHICAREA WHERE GEOGRAPHICAREAID <> ? AND SUBSTR(CAST(ALTERNATIVECODE AS CHAR(10)), 1, 2) = ? ORDER BY NAME ASC";

        PreparedStatement preparedStatement = connection.prepareStatement(sqlSelectQuery);

        preparedStatement.setString(1, geographicAreaId);
        preparedStatement.setString(2, code);
        
        return preparedStatement;
    }
	
	public List<GeoAreaClassBean> GeographicAreaClassifications() {
		
		List<GeoAreaClassBean> tempList = new ArrayList<GeoAreaClassBean>();
		
		try (Connection connection = DBConnection.getConnectionToDatabase();
                PreparedStatement preparedStatement = GetGeographicAreaClassifications(connection);
                ResultSet resultSet = preparedStatement.executeQuery())
        {
			int id = 0;
			int level = 0;
            String name = "";

            while (resultSet.next())
            {
            	id = resultSet.getInt("geographicareaid");
                level = resultSet.getInt("level");
                name = resultSet.getString("name");

                GeoAreaClassBean temp = new GeoAreaClassBean();
                
                temp.setGeographicAreaId(id);
                temp.setLevel(level);
                temp.setName(name);
                
                tempList.add(temp);
            }

            connection.rollback();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
						
		return tempList;
	}
	
	public IndividualGeoAreaDetailsBean IndividualGeographicAreaDetails(String geographicAreaId) {
		
		IndividualGeoAreaDetailsBean temp = new IndividualGeoAreaDetailsBean();
		
		try (Connection connection = DBConnection.getConnectionToDatabase();
                PreparedStatement preparedStatement = GetIndividualGeographicAreaDetails(connection, geographicAreaId);
                ResultSet resultSet = preparedStatement.executeQuery())
        {
			String name = "";
			String code = "";
			String level = "";
			int totalPopulation = 0;
            

            while (resultSet.next())
            {
            	name = resultSet.getString("name");
            	code = resultSet.getString("code");
                level = resultSet.getString("level");
                totalPopulation = resultSet.getInt("combined");
                
                temp.setName(name);
                temp.setCode(code);
                temp.setLevel(level);
                temp.setTotalPopulation(totalPopulation);
            }

            connection.rollback();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
						
		return temp;
	}
	
	public List<String> IndividualGeographicAreaDetailNames(String geographicAreaId, String code) {
		
		List<String> tempList = new ArrayList<String>();
		
		try (Connection connection = DBConnection.getConnectionToDatabase();
                PreparedStatement preparedStatement = GetIndividualGeographicAreaDetailNames(connection, geographicAreaId, code);
                ResultSet resultSet = preparedStatement.executeQuery())
        {
            String name = "";

            while (resultSet.next())
            {
                name = resultSet.getString("name");
                
                tempList.add(name);
            }

            connection.rollback();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
						
		return tempList;
	}
}
