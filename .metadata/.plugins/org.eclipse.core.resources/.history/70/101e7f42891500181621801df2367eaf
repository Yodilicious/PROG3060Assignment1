/*
 *  PROG3060
 *   @author Jodi Visser
 *   Assignment 1: JDBC Web Application using CanadaCensusDB
 *		ApplicationDao.java
 *   	Date Created: February 16, 2018
 */

package prog3060.assignment1.jvisser.dao;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import prog3060.assignment1.jvisser.models.AgeGroupInfoBean;
import prog3060.assignment1.jvisser.models.GeoAreaClassBean;
import prog3060.assignment1.jvisser.models.IndividualGeoAreaDetailsBean;

/**
 * @author Jodi
 *
 */
public class ApplicationDao {
	
	private String name;
	private String password;
	
	public ApplicationDao(String name, String password) {
		
		this.name = name;
		this.password = password;
	}

	/**
	 * @param connection
	 * @return query results
	 * @throws SQLException
	 */
	private static PreparedStatement GetGeographicAreaClassifications(Connection connection) throws SQLException
    {
        String sqlSelectQuery = "SELECT GEOGRAPHICAREAID, LEVEL, NAME FROM GEOGRAPHICAREA ORDER BY LEVEL ASC, NAME ASC";

        PreparedStatement preparedStatement = connection.prepareStatement(sqlSelectQuery);

        return preparedStatement;
    }
	
	/**
	 * @param connection
	 * @param geographicAreaId
	 * @return Query results
	 * @throws SQLException
	 */
	private static PreparedStatement GetIndividualGeographicAreaDetails(Connection connection, String geographicAreaId) throws SQLException
    {
        String sqlSelectQuery = "SELECT G.NAME, G.CODE, G.LEVEL, A.COMBINED FROM GEOGRAPHICAREA As G JOIN AGE As A ON G.GEOGRAPHICAREAID = A.GEOGRAPHICAREA JOIN CENSUSYEAR As Y ON A.CENSUSYEAR = Y.CENSUSYEARID WHERE A.AGEGROUP = 1 AND Y.CENSUSYEAR = 2016 AND G.GEOGRAPHICAREAID = ?";

        PreparedStatement preparedStatement = connection.prepareStatement(sqlSelectQuery);

        preparedStatement.setString(1, geographicAreaId);
        
        return preparedStatement;
    }
	
	
	/**
	 * @param connection
	 * @param level
	 * @param code
	 * @return Query results
	 * @throws SQLException
	 */
	private static PreparedStatement GetIndividualGeographicAreaDetailNames(Connection connection, String level, String code) throws SQLException
    {
        String sqlSelectQuery = "SELECT NAME FROM GEOGRAPHICAREA WHERE LEVEL = ? AND SUBSTR(CAST(ALTERNATIVECODE AS CHAR(10)), 1, 2) = ? ORDER BY NAME ASC";

        PreparedStatement preparedStatement = connection.prepareStatement(sqlSelectQuery);

        preparedStatement.setString(1, level);
        preparedStatement.setString(2, code);
        
        return preparedStatement;
    }
	
	/**
	 * @param connection
	 * @return Query results
	 * @throws SQLException
	 */
	private static PreparedStatement GetAllProvinces(Connection connection) throws SQLException
    {
        String sqlSelectQuery = "SELECT NAME FROM GEOGRAPHICAREA WHERE LEVEL = 1 ORDER BY NAME ASC";

        PreparedStatement preparedStatement = connection.prepareStatement(sqlSelectQuery);
        
        return preparedStatement;
    }
	
	/**
	 * @param connection
	 * @param id
	 * @param year
	 * @return Query results
	 * @throws SQLException
	 */
	private static PreparedStatement GetAgeGroup(Connection connection, int id, int year) throws SQLException
    {
        String sqlSelectQuery = "SELECT A.DESCRIPTION, SUM(AGE.MALE) As malepop, SUM(AGE.FEMALE) As femalepop FROM AGEGROUP As A JOIN AGE ON A.AGEGROUPID = AGE.AGEGROUP JOIN CENSUSYEAR As C ON AGE.CENSUSYEAR = C.CENSUSYEARID WHERE AGEGROUPID = ? AND C.CENSUSYEAR = ? GROUP BY A.DESCRIPTION";

        PreparedStatement preparedStatement = connection.prepareStatement(sqlSelectQuery);
        
        preparedStatement.setInt(1, id);
        preparedStatement.setInt(2, year);
        
        return preparedStatement;
    }
	
	/**
	 * @return
	 */
	public List<GeoAreaClassBean> GeographicAreaClassifications() {
		
		List<GeoAreaClassBean> tempList = new ArrayList<GeoAreaClassBean>();
		
		try (Connection connection = DBConnection.getConnectionToDatabase();
                PreparedStatement preparedStatement = GetGeographicAreaClassifications(connection);
                ResultSet resultSet = preparedStatement.executeQuery())
        {
			int id = 0;
			int level = 0;
            String name = "";

            while (resultSet.next())
            {
            	id = resultSet.getInt("geographicareaid");
                level = resultSet.getInt("level");
                name = resultSet.getString("name");

                GeoAreaClassBean temp = new GeoAreaClassBean();
                
                temp.setGeographicAreaId(id);
                temp.setLevel(level);
                temp.setName(name);
                
                tempList.add(temp);
            }

            connection.rollback();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
						
		return tempList;
	}
	
	/**
	 * @param geographicAreaId
	 * @return Details for a given Geographic Area
	 */
	public IndividualGeoAreaDetailsBean IndividualGeographicAreaDetails(String geographicAreaId) {
		
		IndividualGeoAreaDetailsBean temp = new IndividualGeoAreaDetailsBean();
		
		try (Connection connection = DBConnection.getConnectionToDatabase();
                PreparedStatement preparedStatement = GetIndividualGeographicAreaDetails(connection, geographicAreaId);
                ResultSet resultSet = preparedStatement.executeQuery())
        {
			String name = "";
			String code = "";
			String level = "";
			int totalPopulation = 0;
            

            while (resultSet.next())
            {
            	name = resultSet.getString("name");
            	code = resultSet.getString("code");
                level = resultSet.getString("level");
                totalPopulation = resultSet.getInt("combined");
                
                temp.setName(name);
                temp.setCode(code);
                temp.setLevel(level);
                temp.setTotalPopulation(totalPopulation);
            }

            connection.rollback();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
						
		return temp;
	}
	
	/**
	 * @param level
	 * @param code
	 * @return returns a list of Geographic Area with its name, code, and total population for 2016 Census
	 */
	public List<String> IndividualGeographicAreaDetailNames(String level, String code) {
		
		List<String> tempList = new ArrayList<String>();
		
		try (Connection connection = DBConnection.getConnectionToDatabase();
                PreparedStatement preparedStatement = GetIndividualGeographicAreaDetailNames(connection, level, code);
                ResultSet resultSet = preparedStatement.executeQuery())
        {
            String name = "";

            while (resultSet.next())
            {
                name = resultSet.getString("name");
                
                tempList.add(name);
            }

            connection.rollback();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
						
		return tempList;
	}
	
	/**
	 * @return List of Provinces
	 */
	public List<String> GetAllProvinceNames() {
		
		List<String> tempList = new ArrayList<String>();
		
		try (Connection connection = DBConnection.getConnectionToDatabase();
                PreparedStatement preparedStatement = GetAllProvinces(connection);
                ResultSet resultSet = preparedStatement.executeQuery())
        {
            String name = "";

            while (resultSet.next())
            {
                name = resultSet.getString("name");
                
                tempList.add(name);
            }

            connection.rollback();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
						
		return tempList;
	}
	
	/**
	 * @param ageGroupId
	 * @return list of age groups for a given census year and its male/female population
	 */
	public AgeGroupInfoBean GetAgeGroupInfo(int ageGroupId) {
		
		AgeGroupInfoBean temp = new AgeGroupInfoBean();
		
		try (Connection connection = DBConnection.getConnectionToDatabase();
                PreparedStatement preparedStatement = GetAgeGroup(connection, ageGroupId, 2011);
                ResultSet resultSet = preparedStatement.executeQuery())
        {
			String description = "";
			int malePopulation = 0;
			int femalePopulation = 0;
            
            while (resultSet.next())
            {
            	description = resultSet.getString("description");
            	malePopulation = resultSet.getInt("malepop");
                femalePopulation = resultSet.getInt("femalepop");
                
                temp.setDescription(description);
                temp.setMalePopulation2011(malePopulation);
                temp.setFemalePopulation2011(femalePopulation);
            }

            connection.rollback();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
		
		try (Connection connection = DBConnection.getConnectionToDatabase();
                PreparedStatement preparedStatement = GetAgeGroup(connection, ageGroupId, 2016);
                ResultSet resultSet = preparedStatement.executeQuery())
        {
			String description = "";
			int malePopulation = 0;
			int femalePopulation = 0;
            
            while (resultSet.next())
            {
            	description = resultSet.getString("description");
            	malePopulation = resultSet.getInt("malepop");
                femalePopulation = resultSet.getInt("femalepop");
                
                temp.setDescription(description);
                temp.setMalePopulation2016(malePopulation);
                temp.setFemalePopulation2016(femalePopulation);
            }

            connection.rollback();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
						
		return temp;
	}
}
